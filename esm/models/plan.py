# coding: utf-8

from __future__ import absolute_import
#
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Plan(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, description: str=None, metadata: object=None, free: bool=None, bindable: bool=None):
        """
        Plan - a model defined in Swagger

        :param id: The id of this Plan.
        :type id: str
        :param name: The name of this Plan.
        :type name: str
        :param description: The description of this Plan.
        :type description: str
        :param metadata: The metadata of this Plan.
        :type metadata: object
        :param free: The free of this Plan.
        :type free: bool
        :param bindable: The bindable of this Plan.
        :type bindable: bool
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'description': str,
            'metadata': object,
            'free': bool,
            'bindable': bool
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'metadata': 'metadata',
            'free': 'free',
            'bindable': 'bindable'
        }

        self._id = id
        self._name = name
        self._description = description
        self._metadata = metadata
        self._free = free
        self._bindable = bindable

    @classmethod
    def from_dict(cls, dikt) -> 'Plan':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Plan of this Plan.
        :rtype: Plan
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this Plan.
        'An identifier used to correlate this plan in future requests to the catalog. This must be unique within the client namespace, using a GUID is recommended.' 

        :return: The id of this Plan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Plan.
        'An identifier used to correlate this plan in future requests to the catalog. This must be unique within the client namespace, using a GUID is recommended.' 

        :param id: The id of this Plan.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this Plan.
        The CLI-friendly name of the plan that will appear in the catalog. All lowercase, no spaces.

        :return: The name of this Plan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Plan.
        The CLI-friendly name of the plan that will appear in the catalog. All lowercase, no spaces.

        :param name: The name of this Plan.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """
        Gets the description of this Plan.
        A short description of the service that will appear in the catalog.

        :return: The description of this Plan.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this Plan.
        A short description of the service that will appear in the catalog.

        :param description: The description of this Plan.
        :type description: str
        """

        self._description = description

    @property
    def metadata(self) -> object:
        """
        Gets the metadata of this Plan.
        A list of metadata for a service plan.

        :return: The metadata of this Plan.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """
        Sets the metadata of this Plan.
        A list of metadata for a service plan.

        :param metadata: The metadata of this Plan.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def free(self) -> bool:
        """
        Gets the free of this Plan.
        'This field allows the plan to be limited by the non_basic_services_allowed field in a client quota.' 

        :return: The free of this Plan.
        :rtype: bool
        """
        return self._free

    @free.setter
    def free(self, free: bool):
        """
        Sets the free of this Plan.
        'This field allows the plan to be limited by the non_basic_services_allowed field in a client quota.' 

        :param free: The free of this Plan.
        :type free: bool
        """

        self._free = free

    @property
    def bindable(self) -> bool:
        """
        Gets the bindable of this Plan.
        'Specifies whether instances of the service plan can be bound to applications. This field is optional. If specified, this takes precedence over the bindable attribute of the service. If not specified, the default is derived from the service.' 

        :return: The bindable of this Plan.
        :rtype: bool
        """
        return self._bindable

    @bindable.setter
    def bindable(self, bindable: bool):
        """
        Sets the bindable of this Plan.
        'Specifies whether instances of the service plan can be bound to applications. This field is optional. If specified, this takes precedence over the bindable attribute of the service. If not specified, the default is derived from the service.' 

        :param bindable: The bindable of this Plan.
        :type bindable: bool
        """

        self._bindable = bindable

