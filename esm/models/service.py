# coding: utf-8

from __future__ import absolute_import
from esm.models.parameter import Parameter
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Service(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, service_id: str=None, plan_id: str=None, organization_guid: str=None, space_guid: str=None, parameters: Parameter=None, accepts_incomplete: bool=None):
        """
        Service - a model defined in Swagger

        :param service_id: The service_id of this Service.
        :type service_id: str
        :param plan_id: The plan_id of this Service.
        :type plan_id: str
        :param organization_guid: The organization_guid of this Service.
        :type organization_guid: str
        :param space_guid: The space_guid of this Service.
        :type space_guid: str
        :param parameters: The parameters of this Service.
        :type parameters: Parameter
        :param accepts_incomplete: The accepts_incomplete of this Service.
        :type accepts_incomplete: bool
        """
        self.swagger_types = {
            'service_id': str,
            'plan_id': str,
            'organization_guid': str,
            'space_guid': str,
            'parameters': Parameter,
            'accepts_incomplete': bool
        }

        self.attribute_map = {
            'service_id': 'service_id',
            'plan_id': 'plan_id',
            'organization_guid': 'organization_guid',
            'space_guid': 'space_guid',
            'parameters': 'parameters',
            'accepts_incomplete': 'accepts_incomplete'
        }

        self._service_id = service_id
        self._plan_id = plan_id
        self._organization_guid = organization_guid
        self._space_guid = space_guid
        self._parameters = parameters
        self._accepts_incomplete = accepts_incomplete

    @classmethod
    def from_dict(cls, dikt) -> 'Service':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Service of this Service.
        :rtype: Service
        """
        return deserialize_model(dikt, cls)

    @property
    def service_id(self) -> str:
        """
        Gets the service_id of this Service.
        'The ID of the service within the catalog above. While not strictly necessary, some brokers might make use of this ID.' 

        :return: The service_id of this Service.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """
        Sets the service_id of this Service.
        'The ID of the service within the catalog above. While not strictly necessary, some brokers might make use of this ID.' 

        :param service_id: The service_id of this Service.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def plan_id(self) -> str:
        """
        Gets the plan_id of this Service.
        'The ID of the plan within the above service (from the catalog endpoint) that the user would like provisioned. Because plans have identifiers unique to a broker, this is enough information to determine what to provision.' 

        :return: The plan_id of this Service.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id: str):
        """
        Sets the plan_id of this Service.
        'The ID of the plan within the above service (from the catalog endpoint) that the user would like provisioned. Because plans have identifiers unique to a broker, this is enough information to determine what to provision.' 

        :param plan_id: The plan_id of this Service.
        :type plan_id: str
        """

        self._plan_id = plan_id

    @property
    def organization_guid(self) -> str:
        """
        Gets the organization_guid of this Service.
        'The client GUID of the organization under which the service is to be provisioned. Although most brokers will not use this field, it could be helpful in determining data placement or applying custom business rules.' 

        :return: The organization_guid of this Service.
        :rtype: str
        """
        return self._organization_guid

    @organization_guid.setter
    def organization_guid(self, organization_guid: str):
        """
        Sets the organization_guid of this Service.
        'The client GUID of the organization under which the service is to be provisioned. Although most brokers will not use this field, it could be helpful in determining data placement or applying custom business rules.' 

        :param organization_guid: The organization_guid of this Service.
        :type organization_guid: str
        """

        self._organization_guid = organization_guid

    @property
    def space_guid(self) -> str:
        """
        Gets the space_guid of this Service.
        Similar to organization_guid, but for the space.

        :return: The space_guid of this Service.
        :rtype: str
        """
        return self._space_guid

    @space_guid.setter
    def space_guid(self, space_guid: str):
        """
        Sets the space_guid of this Service.
        Similar to organization_guid, but for the space.

        :param space_guid: The space_guid of this Service.
        :type space_guid: str
        """

        self._space_guid = space_guid

    @property
    def parameters(self) -> Parameter:
        """
        Gets the parameters of this Service.

        :return: The parameters of this Service.
        :rtype: Parameter
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Parameter):
        """
        Sets the parameters of this Service.

        :param parameters: The parameters of this Service.
        :type parameters: Parameter
        """

        self._parameters = parameters

    @property
    def accepts_incomplete(self) -> bool:
        """
        Gets the accepts_incomplete of this Service.

        :return: The accepts_incomplete of this Service.
        :rtype: bool
        """
        return self._accepts_incomplete

    @accepts_incomplete.setter
    def accepts_incomplete(self, accepts_incomplete: bool):
        """
        Sets the accepts_incomplete of this Service.

        :param accepts_incomplete: The accepts_incomplete of this Service.
        :type accepts_incomplete: bool
        """

        self._accepts_incomplete = accepts_incomplete

