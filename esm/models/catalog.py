# coding: utf-8

from __future__ import absolute_import
from esm.models.service_type import ServiceType
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Catalog(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, services: List[ServiceType]=None):
        """
        Catalog - a model defined in Swagger

        :param services: The services of this Catalog.
        :type services: List[ServiceType]
        """
        self.swagger_types = {
            'services': List[ServiceType]
        }

        self.attribute_map = {
            'services': 'services'
        }

        self._services = services

    @classmethod
    def from_dict(cls, dikt) -> 'Catalog':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Catalog of this Catalog.
        :rtype: Catalog
        """
        return deserialize_model(dikt, cls)

    @property
    def services(self) -> List[ServiceType]:
        """
        Gets the services of this Catalog.

        :return: The services of this Catalog.
        :rtype: List[ServiceType]
        """
        return self._services

    @services.setter
    def services(self, services: List[ServiceType]):
        """
        Sets the services of this Catalog.

        :param services: The services of this Catalog.
        :type services: List[ServiceType]
        """
        if services is None:
            raise ValueError("Invalid value for `services`, must not be `None`")

        self._services = services

