# coding: utf-8

from __future__ import absolute_import
from esm.models.dashboard_client import DashboardClient
from esm.models.meta_data import MetaData
from esm.models.plan import Plan
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class CatalogService(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, description: str=None, bindable: bool=None, tags: List[str]=None, metadata: MetaData=None, requires: List[str]=None, plan_updateable: bool=None, plans: List[Plan]=None, dashboard_client: DashboardClient=None):
        """
        CatalogService - a model defined in Swagger

        :param id: The id of this CatalogService.
        :type id: str
        :param name: The name of this CatalogService.
        :type name: str
        :param description: The description of this CatalogService.
        :type description: str
        :param bindable: The bindable of this CatalogService.
        :type bindable: bool
        :param tags: The tags of this CatalogService.
        :type tags: List[str]
        :param metadata: The metadata of this CatalogService.
        :type metadata: MetaData
        :param requires: The requires of this CatalogService.
        :type requires: List[str]
        :param plan_updateable: The plan_updateable of this CatalogService.
        :type plan_updateable: bool
        :param plans: The plans of this CatalogService.
        :type plans: List[Plan]
        :param dashboard_client: The dashboard_client of this CatalogService.
        :type dashboard_client: DashboardClient
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'description': str,
            'bindable': bool,
            'tags': List[str],
            'metadata': MetaData,
            'requires': List[str],
            'plan_updateable': bool,
            'plans': List[Plan],
            'dashboard_client': DashboardClient
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'bindable': 'bindable',
            'tags': 'tags',
            'metadata': 'metadata',
            'requires': 'requires',
            'plan_updateable': 'plan_updateable',
            'plans': 'plans',
            'dashboard_client': 'dashboard_client'
        }

        self._id = id
        self._name = name
        self._description = description
        self._bindable = bindable
        self._tags = tags
        self._metadata = metadata
        self._requires = requires
        self._plan_updateable = plan_updateable
        self._plans = plans
        self._dashboard_client = dashboard_client

    @classmethod
    def from_dict(cls, dikt) -> 'CatalogService':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CatalogService of this CatalogService.
        :rtype: CatalogService
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this CatalogService.
        An identifier used to correlate this service in future requests to the catalog. This must be unique within the client namespace, using a GUID is recommended. 

        :return: The id of this CatalogService.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this CatalogService.
        An identifier used to correlate this service in future requests to the catalog. This must be unique within the client namespace, using a GUID is recommended. 

        :param id: The id of this CatalogService.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this CatalogService.
        The CLI-friendly name of the service that will appear in the catalog. All lowercase, no spaces.

        :return: The name of this CatalogService.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this CatalogService.
        The CLI-friendly name of the service that will appear in the catalog. All lowercase, no spaces.

        :param name: The name of this CatalogService.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """
        Gets the description of this CatalogService.
        A short description of the service that will appear in the catalog.

        :return: The description of this CatalogService.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this CatalogService.
        A short description of the service that will appear in the catalog.

        :param description: The description of this CatalogService.
        :type description: str
        """

        self._description = description

    @property
    def bindable(self) -> bool:
        """
        Gets the bindable of this CatalogService.
        Whether the service can be bound to applications.

        :return: The bindable of this CatalogService.
        :rtype: bool
        """
        return self._bindable

    @bindable.setter
    def bindable(self, bindable: bool):
        """
        Sets the bindable of this CatalogService.
        Whether the service can be bound to applications.

        :param bindable: The bindable of this CatalogService.
        :type bindable: bool
        """

        self._bindable = bindable

    @property
    def tags(self) -> List[str]:
        """
        Gets the tags of this CatalogService.
        Tags provide a flexible mechanism to expose a classification, attribute, or base technology of a service, enabling equivalent services to be swapped out without changes to dependent logic in applications, buildpacks, or other services. E.g. mysql, relational, redis, key-value, caching, messaging, amqp. 

        :return: The tags of this CatalogService.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """
        Sets the tags of this CatalogService.
        Tags provide a flexible mechanism to expose a classification, attribute, or base technology of a service, enabling equivalent services to be swapped out without changes to dependent logic in applications, buildpacks, or other services. E.g. mysql, relational, redis, key-value, caching, messaging, amqp. 

        :param tags: The tags of this CatalogService.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def metadata(self) -> MetaData:
        """
        Gets the metadata of this CatalogService.

        :return: The metadata of this CatalogService.
        :rtype: MetaData
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: MetaData):
        """
        Sets the metadata of this CatalogService.

        :param metadata: The metadata of this CatalogService.
        :type metadata: MetaData
        """

        self._metadata = metadata

    @property
    def requires(self) -> List[str]:
        """
        Gets the requires of this CatalogService.
        'A list of permissions that the user would have to give the service, if they provision it. The only permission currently supported is syslog_drain.' 

        :return: The requires of this CatalogService.
        :rtype: List[str]
        """
        return self._requires

    @requires.setter
    def requires(self, requires: List[str]):
        """
        Sets the requires of this CatalogService.
        'A list of permissions that the user would have to give the service, if they provision it. The only permission currently supported is syslog_drain.' 

        :param requires: The requires of this CatalogService.
        :type requires: List[str]
        """

        self._requires = requires

    @property
    def plan_updateable(self) -> bool:
        """
        Gets the plan_updateable of this CatalogService.
        \"Whether the service supports upgrade/downgrade for some plans. Please note that the misspelling of the attribute plan_updatable to plan_updateable was done by mistake. Note that the misspelling is kept instead of fixing it and thus maintaining backward compatibility.\" 

        :return: The plan_updateable of this CatalogService.
        :rtype: bool
        """
        return self._plan_updateable

    @plan_updateable.setter
    def plan_updateable(self, plan_updateable: bool):
        """
        Sets the plan_updateable of this CatalogService.
        \"Whether the service supports upgrade/downgrade for some plans. Please note that the misspelling of the attribute plan_updatable to plan_updateable was done by mistake. Note that the misspelling is kept instead of fixing it and thus maintaining backward compatibility.\" 

        :param plan_updateable: The plan_updateable of this CatalogService.
        :type plan_updateable: bool
        """

        self._plan_updateable = plan_updateable

    @property
    def plans(self) -> List[Plan]:
        """
        Gets the plans of this CatalogService.
        A list of plans for this service

        :return: The plans of this CatalogService.
        :rtype: List[Plan]
        """
        return self._plans

    @plans.setter
    def plans(self, plans: List[Plan]):
        """
        Sets the plans of this CatalogService.
        A list of plans for this service

        :param plans: The plans of this CatalogService.
        :type plans: List[Plan]
        """

        self._plans = plans

    @property
    def dashboard_client(self) -> DashboardClient:
        """
        Gets the dashboard_client of this CatalogService.

        :return: The dashboard_client of this CatalogService.
        :rtype: DashboardClient
        """
        return self._dashboard_client

    @dashboard_client.setter
    def dashboard_client(self, dashboard_client: DashboardClient):
        """
        Sets the dashboard_client of this CatalogService.

        :param dashboard_client: The dashboard_client of this CatalogService.
        :type dashboard_client: DashboardClient
        """

        self._dashboard_client = dashboard_client

