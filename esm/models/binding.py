# coding: utf-8

from __future__ import absolute_import
from esm.models.bind_resource import BindResource
from esm.models.parameter import Parameter
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Binding(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, app_guid: str=None, plan_id: str=None, service_id: str=None, parameters: Parameter=None, bind_resource: BindResource=None):
        """
        Binding - a model defined in Swagger

        :param app_guid: The app_guid of this Binding.
        :type app_guid: str
        :param plan_id: The plan_id of this Binding.
        :type plan_id: str
        :param service_id: The service_id of this Binding.
        :type service_id: str
        :param parameters: The parameters of this Binding.
        :type parameters: Parameter
        :param bind_resource: The bind_resource of this Binding.
        :type bind_resource: BindResource
        """
        self.swagger_types = {
            'app_guid': str,
            'plan_id': str,
            'service_id': str,
            'parameters': Parameter,
            'bind_resource': BindResource
        }

        self.attribute_map = {
            'app_guid': 'app_guid',
            'plan_id': 'plan_id',
            'service_id': 'service_id',
            'parameters': 'parameters',
            'bind_resource': 'bind_resource'
        }

        self._app_guid = app_guid
        self._plan_id = plan_id
        self._service_id = service_id
        self._parameters = parameters
        self._bind_resource = bind_resource

    @classmethod
    def from_dict(cls, dikt) -> 'Binding':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Binding of this Binding.
        :rtype: Binding
        """
        return deserialize_model(dikt, cls)

    @property
    def app_guid(self) -> str:
        """
        Gets the app_guid of this Binding.
        \"Deprecated in favor of bind_resource.app_guid. GUID of an application associated with the binding to be created.\" 

        :return: The app_guid of this Binding.
        :rtype: str
        """
        return self._app_guid

    @app_guid.setter
    def app_guid(self, app_guid: str):
        """
        Sets the app_guid of this Binding.
        \"Deprecated in favor of bind_resource.app_guid. GUID of an application associated with the binding to be created.\" 

        :param app_guid: The app_guid of this Binding.
        :type app_guid: str
        """

        self._app_guid = app_guid

    @property
    def plan_id(self) -> str:
        """
        Gets the plan_id of this Binding.
        'ID of the plan from the catalog. While not strictly necessary, some brokers might make use of this ID.' 

        :return: The plan_id of this Binding.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id: str):
        """
        Sets the plan_id of this Binding.
        'ID of the plan from the catalog. While not strictly necessary, some brokers might make use of this ID.' 

        :param plan_id: The plan_id of this Binding.
        :type plan_id: str
        """

        self._plan_id = plan_id

    @property
    def service_id(self) -> str:
        """
        Gets the service_id of this Binding.
        'ID of the service from the catalog. While not strictly necessary, some brokers might make use of this ID.' 

        :return: The service_id of this Binding.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """
        Sets the service_id of this Binding.
        'ID of the service from the catalog. While not strictly necessary, some brokers might make use of this ID.' 

        :param service_id: The service_id of this Binding.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def parameters(self) -> Parameter:
        """
        Gets the parameters of this Binding.

        :return: The parameters of this Binding.
        :rtype: Parameter
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Parameter):
        """
        Sets the parameters of this Binding.

        :param parameters: The parameters of this Binding.
        :type parameters: Parameter
        """

        self._parameters = parameters

    @property
    def bind_resource(self) -> BindResource:
        """
        Gets the bind_resource of this Binding.

        :return: The bind_resource of this Binding.
        :rtype: BindResource
        """
        return self._bind_resource

    @bind_resource.setter
    def bind_resource(self, bind_resource: BindResource):
        """
        Sets the bind_resource of this Binding.

        :param bind_resource: The bind_resource of this Binding.
        :type bind_resource: BindResource
        """

        self._bind_resource = bind_resource

