# coding: utf-8

from __future__ import absolute_import
#
from esm.models.bind_resource import BindResource
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class BindingRequest(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, app_guid: str=None, plan_id: str=None, service_id: str=None, parameters: object=None, bind_resource: BindResource=None):
        """
        BindingRequest - a model defined in Swagger

        :param app_guid: The app_guid of this BindingRequest.
        :type app_guid: str
        :param plan_id: The plan_id of this BindingRequest.
        :type plan_id: str
        :param service_id: The service_id of this BindingRequest.
        :type service_id: str
        :param parameters: The parameters of this BindingRequest.
        :type parameters: object
        :param bind_resource: The bind_resource of this BindingRequest.
        :type bind_resource: BindResource
        """
        self.swagger_types = {
            'app_guid': str,
            'plan_id': str,
            'service_id': str,
            'parameters': object,
            'bind_resource': BindResource
        }

        self.attribute_map = {
            'app_guid': 'app_guid',
            'plan_id': 'plan_id',
            'service_id': 'service_id',
            'parameters': 'parameters',
            'bind_resource': 'bind_resource'
        }

        self._app_guid = app_guid
        self._plan_id = plan_id
        self._service_id = service_id
        self._parameters = parameters
        self._bind_resource = bind_resource

    @classmethod
    def from_dict(cls, dikt) -> 'BindingRequest':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BindingRequest of this BindingRequest.
        :rtype: BindingRequest
        """
        return deserialize_model(dikt, cls)

    @property
    def app_guid(self) -> str:
        """
        Gets the app_guid of this BindingRequest.
        Deprecated in favor of bind_resource.app_guid. GUID of an application associated with the binding to be created. If present, MUST be a non-empty string. 

        :return: The app_guid of this BindingRequest.
        :rtype: str
        """
        return self._app_guid

    @app_guid.setter
    def app_guid(self, app_guid: str):
        """
        Sets the app_guid of this BindingRequest.
        Deprecated in favor of bind_resource.app_guid. GUID of an application associated with the binding to be created. If present, MUST be a non-empty string. 

        :param app_guid: The app_guid of this BindingRequest.
        :type app_guid: str
        """

        self._app_guid = app_guid

    @property
    def plan_id(self) -> str:
        """
        Gets the plan_id of this BindingRequest.
        ID of the plan from the catalog. MUST be a non-empty string. 

        :return: The plan_id of this BindingRequest.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id: str):
        """
        Sets the plan_id of this BindingRequest.
        ID of the plan from the catalog. MUST be a non-empty string. 

        :param plan_id: The plan_id of this BindingRequest.
        :type plan_id: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")

        self._plan_id = plan_id

    @property
    def service_id(self) -> str:
        """
        Gets the service_id of this BindingRequest.
        ID of the service from the catalog. MUST be a non-empty string. 

        :return: The service_id of this BindingRequest.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """
        Sets the service_id of this BindingRequest.
        ID of the service from the catalog. MUST be a non-empty string. 

        :param service_id: The service_id of this BindingRequest.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def parameters(self) -> object:
        """
        Gets the parameters of this BindingRequest.
        Configuration options for the service binding. An opaque object, controller treats this as a blob. Brokers SHOULD ensure that the client has provided valid configuration parameters and values for the operation. 

        :return: The parameters of this BindingRequest.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: object):
        """
        Sets the parameters of this BindingRequest.
        Configuration options for the service binding. An opaque object, controller treats this as a blob. Brokers SHOULD ensure that the client has provided valid configuration parameters and values for the operation. 

        :param parameters: The parameters of this BindingRequest.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def bind_resource(self) -> BindResource:
        """
        Gets the bind_resource of this BindingRequest.
        A JSON object that contains data for platform resources associated with the binding to be created. See Bind Resource Object for more information. 

        :return: The bind_resource of this BindingRequest.
        :rtype: BindResource
        """
        return self._bind_resource

    @bind_resource.setter
    def bind_resource(self, bind_resource: BindResource):
        """
        Sets the bind_resource of this BindingRequest.
        A JSON object that contains data for platform resources associated with the binding to be created. See Bind Resource Object for more information. 

        :param bind_resource: The bind_resource of this BindingRequest.
        :type bind_resource: BindResource
        """

        self._bind_resource = bind_resource

