# coding: utf-8

from __future__ import absolute_import
#
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ServiceRequest(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, service_id: str=None, plan_id: str=None, context: object=None, organization_guid: str=None, space_guid: str=None, parameters: object=None):
        """
        ServiceRequest - a model defined in Swagger

        :param service_id: The service_id of this ServiceRequest.
        :type service_id: str
        :param plan_id: The plan_id of this ServiceRequest.
        :type plan_id: str
        :param context: The context of this ServiceRequest.
        :type context: object
        :param organization_guid: The organization_guid of this ServiceRequest.
        :type organization_guid: str
        :param space_guid: The space_guid of this ServiceRequest.
        :type space_guid: str
        :param parameters: The parameters of this ServiceRequest.
        :type parameters: object
        """
        self.swagger_types = {
            'service_id': str,
            'plan_id': str,
            'context': object,
            'organization_guid': str,
            'space_guid': str,
            'parameters': object
        }

        self.attribute_map = {
            'service_id': 'service_id',
            'plan_id': 'plan_id',
            'context': 'context',
            'organization_guid': 'organization_guid',
            'space_guid': 'space_guid',
            'parameters': 'parameters'
        }

        self._service_id = service_id
        self._plan_id = plan_id
        self._context = context
        self._organization_guid = organization_guid
        self._space_guid = space_guid
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceRequest':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceRequest of this ServiceRequest.
        :rtype: ServiceRequest
        """
        return deserialize_model(dikt, cls)

    @property
    def service_id(self) -> str:
        """
        Gets the service_id of this ServiceRequest.
        The ID of the service (from the catalog). MUST be globally unique. MUST be a non-empty string. 

        :return: The service_id of this ServiceRequest.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """
        Sets the service_id of this ServiceRequest.
        The ID of the service (from the catalog). MUST be globally unique. MUST be a non-empty string. 

        :param service_id: The service_id of this ServiceRequest.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def plan_id(self) -> str:
        """
        Gets the plan_id of this ServiceRequest.
        The ID of the plan (from the catalog) for which the service instance has been requested. MUST be unique to a service. MUST be a non-empty string. 

        :return: The plan_id of this ServiceRequest.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id: str):
        """
        Sets the plan_id of this ServiceRequest.
        The ID of the plan (from the catalog) for which the service instance has been requested. MUST be unique to a service. MUST be a non-empty string. 

        :param plan_id: The plan_id of this ServiceRequest.
        :type plan_id: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")

        self._plan_id = plan_id

    @property
    def context(self) -> object:
        """
        Gets the context of this ServiceRequest.
        Platform specific contextual information under which the service instance is to be provisioned. Although most brokers will not use this field, it could be helpful in determining data placement or applying custom business rules. context will replace `organization_guid` and `space_guid` in future versions of the specification - in the interim both SHOULD be used to ensure interoperability with old and new implementations. 

        :return: The context of this ServiceRequest.
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context: object):
        """
        Sets the context of this ServiceRequest.
        Platform specific contextual information under which the service instance is to be provisioned. Although most brokers will not use this field, it could be helpful in determining data placement or applying custom business rules. context will replace `organization_guid` and `space_guid` in future versions of the specification - in the interim both SHOULD be used to ensure interoperability with old and new implementations. 

        :param context: The context of this ServiceRequest.
        :type context: object
        """

        self._context = context

    @property
    def organization_guid(self) -> str:
        """
        Gets the organization_guid of this ServiceRequest.
        Deprecated in favor of context. The platform GUID for the organization under which the service instance is to be provisioned. Although most brokers will not use this field, it might be helpful for executing operations on a user's behalf. MUST be a non-empty string. 

        :return: The organization_guid of this ServiceRequest.
        :rtype: str
        """
        return self._organization_guid

    @organization_guid.setter
    def organization_guid(self, organization_guid: str):
        """
        Sets the organization_guid of this ServiceRequest.
        Deprecated in favor of context. The platform GUID for the organization under which the service instance is to be provisioned. Although most brokers will not use this field, it might be helpful for executing operations on a user's behalf. MUST be a non-empty string. 

        :param organization_guid: The organization_guid of this ServiceRequest.
        :type organization_guid: str
        """
        if organization_guid is None:
            raise ValueError("Invalid value for `organization_guid`, must not be `None`")

        self._organization_guid = organization_guid

    @property
    def space_guid(self) -> str:
        """
        Gets the space_guid of this ServiceRequest.
        Deprecated in favor of context. The identifier for the project space within the platform organization. Although most brokers will not use this field, it might be helpful for executing operations on a user's behalf. MUST be a non-empty string. 

        :return: The space_guid of this ServiceRequest.
        :rtype: str
        """
        return self._space_guid

    @space_guid.setter
    def space_guid(self, space_guid: str):
        """
        Sets the space_guid of this ServiceRequest.
        Deprecated in favor of context. The identifier for the project space within the platform organization. Although most brokers will not use this field, it might be helpful for executing operations on a user's behalf. MUST be a non-empty string. 

        :param space_guid: The space_guid of this ServiceRequest.
        :type space_guid: str
        """
        if space_guid is None:
            raise ValueError("Invalid value for `space_guid`, must not be `None`")

        self._space_guid = space_guid

    @property
    def parameters(self) -> object:
        """
        Gets the parameters of this ServiceRequest.
        Configuration options for the service instance. Controller treats this as a blob. Brokers SHOULD ensure that the client has provided valid configuration parameters and values for the operation. 

        :return: The parameters of this ServiceRequest.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: object):
        """
        Sets the parameters of this ServiceRequest.
        Configuration options for the service instance. Controller treats this as a blob. Brokers SHOULD ensure that the client has provided valid configuration parameters and values for the operation. 

        :param parameters: The parameters of this ServiceRequest.
        :type parameters: object
        """

        self._parameters = parameters

