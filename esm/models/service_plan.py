# coding: utf-8

from __future__ import absolute_import
from esm.models.parameter import Parameter
from esm.models.previous_values import PreviousValues
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ServicePlan(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, service_id: str=None, plan_id: str=None, parameters: Parameter=None, accepts_incomplete: bool=None, previous_values: PreviousValues=None):
        """
        ServicePlan - a model defined in Swagger

        :param service_id: The service_id of this ServicePlan.
        :type service_id: str
        :param plan_id: The plan_id of this ServicePlan.
        :type plan_id: str
        :param parameters: The parameters of this ServicePlan.
        :type parameters: Parameter
        :param accepts_incomplete: The accepts_incomplete of this ServicePlan.
        :type accepts_incomplete: bool
        :param previous_values: The previous_values of this ServicePlan.
        :type previous_values: PreviousValues
        """
        self.swagger_types = {
            'service_id': str,
            'plan_id': str,
            'parameters': Parameter,
            'accepts_incomplete': bool,
            'previous_values': PreviousValues
        }

        self.attribute_map = {
            'service_id': 'service_id',
            'plan_id': 'plan_id',
            'parameters': 'parameters',
            'accepts_incomplete': 'accepts_incomplete',
            'previous_values': 'previous_values'
        }

        self._service_id = service_id
        self._plan_id = plan_id
        self._parameters = parameters
        self._accepts_incomplete = accepts_incomplete
        self._previous_values = previous_values

    @classmethod
    def from_dict(cls, dikt) -> 'ServicePlan':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServicePlan of this ServicePlan.
        :rtype: ServicePlan
        """
        return deserialize_model(dikt, cls)

    @property
    def service_id(self) -> str:
        """
        Gets the service_id of this ServicePlan.

        :return: The service_id of this ServicePlan.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """
        Sets the service_id of this ServicePlan.

        :param service_id: The service_id of this ServicePlan.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def plan_id(self) -> str:
        """
        Gets the plan_id of this ServicePlan.
        ID of the new plan from the catalog.

        :return: The plan_id of this ServicePlan.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id: str):
        """
        Sets the plan_id of this ServicePlan.
        ID of the new plan from the catalog.

        :param plan_id: The plan_id of this ServicePlan.
        :type plan_id: str
        """

        self._plan_id = plan_id

    @property
    def parameters(self) -> Parameter:
        """
        Gets the parameters of this ServicePlan.

        :return: The parameters of this ServicePlan.
        :rtype: Parameter
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Parameter):
        """
        Sets the parameters of this ServicePlan.

        :param parameters: The parameters of this ServicePlan.
        :type parameters: Parameter
        """

        self._parameters = parameters

    @property
    def accepts_incomplete(self) -> bool:
        """
        Gets the accepts_incomplete of this ServicePlan.
        \"A value of true indicates that the marketplace and its clients support asynchronous broker operations. If this parameter is not included in the request, and the broker can only provision an instance of the requested plan asynchronously, the broker should reject the request with a 422.\" 

        :return: The accepts_incomplete of this ServicePlan.
        :rtype: bool
        """
        return self._accepts_incomplete

    @accepts_incomplete.setter
    def accepts_incomplete(self, accepts_incomplete: bool):
        """
        Sets the accepts_incomplete of this ServicePlan.
        \"A value of true indicates that the marketplace and its clients support asynchronous broker operations. If this parameter is not included in the request, and the broker can only provision an instance of the requested plan asynchronously, the broker should reject the request with a 422.\" 

        :param accepts_incomplete: The accepts_incomplete of this ServicePlan.
        :type accepts_incomplete: bool
        """

        self._accepts_incomplete = accepts_incomplete

    @property
    def previous_values(self) -> PreviousValues:
        """
        Gets the previous_values of this ServicePlan.

        :return: The previous_values of this ServicePlan.
        :rtype: PreviousValues
        """
        return self._previous_values

    @previous_values.setter
    def previous_values(self, previous_values: PreviousValues):
        """
        Sets the previous_values of this ServicePlan.

        :param previous_values: The previous_values of this ServicePlan.
        :type previous_values: PreviousValues
        """

        self._previous_values = previous_values

