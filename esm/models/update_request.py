# coding: utf-8

from __future__ import absolute_import
#
from esm.models.previous_values import PreviousValues
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class UpdateRequest(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, context: object=None, service_id: str=None, plan_id: str=None, parameters: object=None, previous_values: PreviousValues=None):
        """
        UpdateRequest - a model defined in Swagger

        :param context: The context of this UpdateRequest.
        :type context: object
        :param service_id: The service_id of this UpdateRequest.
        :type service_id: str
        :param plan_id: The plan_id of this UpdateRequest.
        :type plan_id: str
        :param parameters: The parameters of this UpdateRequest.
        :type parameters: object
        :param previous_values: The previous_values of this UpdateRequest.
        :type previous_values: PreviousValues
        """
        self.swagger_types = {
            'context': object,
            'service_id': str,
            'plan_id': str,
            'parameters': object,
            'previous_values': PreviousValues
        }

        self.attribute_map = {
            'context': 'context',
            'service_id': 'service_id',
            'plan_id': 'plan_id',
            'parameters': 'parameters',
            'previous_values': 'previous_values'
        }

        self._context = context
        self._service_id = service_id
        self._plan_id = plan_id
        self._parameters = parameters
        self._previous_values = previous_values

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateRequest':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateRequest of this UpdateRequest.
        :rtype: UpdateRequest
        """
        return deserialize_model(dikt, cls)

    @property
    def context(self) -> object:
        """
        Gets the context of this UpdateRequest.
        Contextual data under which the service instance is created. 

        :return: The context of this UpdateRequest.
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context: object):
        """
        Sets the context of this UpdateRequest.
        Contextual data under which the service instance is created. 

        :param context: The context of this UpdateRequest.
        :type context: object
        """

        self._context = context

    @property
    def service_id(self) -> str:
        """
        Gets the service_id of this UpdateRequest.
        The ID of the service (from the catalog). MUST be globally unique. MUST be a non-empty string. 

        :return: The service_id of this UpdateRequest.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """
        Sets the service_id of this UpdateRequest.
        The ID of the service (from the catalog). MUST be globally unique. MUST be a non-empty string. 

        :param service_id: The service_id of this UpdateRequest.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def plan_id(self) -> str:
        """
        Gets the plan_id of this UpdateRequest.
        The ID of the plan (from the catalog) for which the service instance has been requested. MUST be unique to a service. If present, MUST be a non-empty string. If this field is not present in the request message, then the broker MUST NOT change the plan of the instance as a result of this request. 

        :return: The plan_id of this UpdateRequest.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id: str):
        """
        Sets the plan_id of this UpdateRequest.
        The ID of the plan (from the catalog) for which the service instance has been requested. MUST be unique to a service. If present, MUST be a non-empty string. If this field is not present in the request message, then the broker MUST NOT change the plan of the instance as a result of this request. 

        :param plan_id: The plan_id of this UpdateRequest.
        :type plan_id: str
        """

        self._plan_id = plan_id

    @property
    def parameters(self) -> object:
        """
        Gets the parameters of this UpdateRequest.
        Configuration options for the service instance. An opaque object, controller treats this as a blob. Brokers SHOULD ensure that the client has provided valid configuration parameters and values for the operation. If this field is not present in the request message, then the broker MUST NOT change the parameters of the instance as a result of this request. 

        :return: The parameters of this UpdateRequest.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: object):
        """
        Sets the parameters of this UpdateRequest.
        Configuration options for the service instance. An opaque object, controller treats this as a blob. Brokers SHOULD ensure that the client has provided valid configuration parameters and values for the operation. If this field is not present in the request message, then the broker MUST NOT change the parameters of the instance as a result of this request. 

        :param parameters: The parameters of this UpdateRequest.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def previous_values(self) -> PreviousValues:
        """
        Gets the previous_values of this UpdateRequest.
        Information about the service instance prior to the update. 

        :return: The previous_values of this UpdateRequest.
        :rtype: PreviousValues
        """
        return self._previous_values

    @previous_values.setter
    def previous_values(self, previous_values: PreviousValues):
        """
        Sets the previous_values of this UpdateRequest.
        Information about the service instance prior to the update. 

        :param previous_values: The previous_values of this UpdateRequest.
        :type previous_values: PreviousValues
        """

        self._previous_values = previous_values

