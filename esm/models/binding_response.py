# coding: utf-8

from __future__ import absolute_import
#
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class BindingResponse(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, credentials: object=None, syslog_drain_url: str=None, route_service_url: str=None, volume_mounts: List[object]=None):
        """
        BindingResponse - a model defined in Swagger

        :param credentials: The credentials of this BindingResponse.
        :type credentials: object
        :param syslog_drain_url: The syslog_drain_url of this BindingResponse.
        :type syslog_drain_url: str
        :param route_service_url: The route_service_url of this BindingResponse.
        :type route_service_url: str
        :param volume_mounts: The volume_mounts of this BindingResponse.
        :type volume_mounts: List[object]
        """
        self.swagger_types = {
            'credentials': object,
            'syslog_drain_url': str,
            'route_service_url': str,
            'volume_mounts': List[object]
        }

        self.attribute_map = {
            'credentials': 'credentials',
            'syslog_drain_url': 'syslog_drain_url',
            'route_service_url': 'route_service_url',
            'volume_mounts': 'volume_mounts'
        }

        self._credentials = credentials
        self._syslog_drain_url = syslog_drain_url
        self._route_service_url = route_service_url
        self._volume_mounts = volume_mounts

    @classmethod
    def from_dict(cls, dikt) -> 'BindingResponse':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BindingResponse of this BindingResponse.
        :rtype: BindingResponse
        """
        return deserialize_model(dikt, cls)

    @property
    def credentials(self) -> object:
        """
        Gets the credentials of this BindingResponse.
        A free-form hash of credentials that the bound application can use to access the service.

        :return: The credentials of this BindingResponse.
        :rtype: object
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials: object):
        """
        Sets the credentials of this BindingResponse.
        A free-form hash of credentials that the bound application can use to access the service.

        :param credentials: The credentials of this BindingResponse.
        :type credentials: object
        """

        self._credentials = credentials

    @property
    def syslog_drain_url(self) -> str:
        """
        Gets the syslog_drain_url of this BindingResponse.
        'A URL to which the client should drain logs for the bound application. requires `syslog_drain` must be declared in the catalog endpoint or the client will consider the response invalid.' 

        :return: The syslog_drain_url of this BindingResponse.
        :rtype: str
        """
        return self._syslog_drain_url

    @syslog_drain_url.setter
    def syslog_drain_url(self, syslog_drain_url: str):
        """
        Sets the syslog_drain_url of this BindingResponse.
        'A URL to which the client should drain logs for the bound application. requires `syslog_drain` must be declared in the catalog endpoint or the client will consider the response invalid.' 

        :param syslog_drain_url: The syslog_drain_url of this BindingResponse.
        :type syslog_drain_url: str
        """

        self._syslog_drain_url = syslog_drain_url

    @property
    def route_service_url(self) -> str:
        """
        Gets the route_service_url of this BindingResponse.
        \"A URL to which the client should proxy requests for the bound route. `requires:route_forwarding` must be declared in the catalog endpoint or the client will consider the response invalid.\" 

        :return: The route_service_url of this BindingResponse.
        :rtype: str
        """
        return self._route_service_url

    @route_service_url.setter
    def route_service_url(self, route_service_url: str):
        """
        Sets the route_service_url of this BindingResponse.
        \"A URL to which the client should proxy requests for the bound route. `requires:route_forwarding` must be declared in the catalog endpoint or the client will consider the response invalid.\" 

        :param route_service_url: The route_service_url of this BindingResponse.
        :type route_service_url: str
        """

        self._route_service_url = route_service_url

    @property
    def volume_mounts(self) -> List[object]:
        """
        Gets the volume_mounts of this BindingResponse.
        \"An array of volume mount instructions. `requires:volume_mount` must be declared in the catalog endpoint or the client will consider the response invalid.\" 

        :return: The volume_mounts of this BindingResponse.
        :rtype: List[object]
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts: List[object]):
        """
        Sets the volume_mounts of this BindingResponse.
        \"An array of volume mount instructions. `requires:volume_mount` must be declared in the catalog endpoint or the client will consider the response invalid.\" 

        :param volume_mounts: The volume_mounts of this BindingResponse.
        :type volume_mounts: List[object]
        """

        self._volume_mounts = volume_mounts

