# coding: utf-8

from __future__ import absolute_import
#
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class PlanMetadata(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bullets: str=None, costs: object=None, display_name: str=None, extras: object=None):
        """
        PlanMetadata - a model defined in Swagger

        :param bullets: The bullets of this PlanMetadata.
        :type bullets: str
        :param costs: The costs of this PlanMetadata.
        :type costs: object
        :param display_name: The display_name of this PlanMetadata.
        :type display_name: str
        :param extras: The extras of this PlanMetadata.
        :type extras: object
        """
        self.swagger_types = {
            'bullets': str,
            'costs': object,
            'display_name': str,
            'extras': object
        }

        self.attribute_map = {
            'bullets': 'bullets',
            'costs': 'costs',
            'display_name': 'displayName',
            'extras': 'extras'
        }

        self._bullets = bullets
        self._costs = costs
        self._display_name = display_name
        self._extras = extras

    @classmethod
    def from_dict(cls, dikt) -> 'PlanMetadata':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlanMetadata of this PlanMetadata.
        :rtype: PlanMetadata
        """
        return deserialize_model(dikt, cls)

    @property
    def bullets(self) -> str:
        """
        Gets the bullets of this PlanMetadata.
        Features of this plan, to be displayed in a bulleted-list

        :return: The bullets of this PlanMetadata.
        :rtype: str
        """
        return self._bullets

    @bullets.setter
    def bullets(self, bullets: str):
        """
        Sets the bullets of this PlanMetadata.
        Features of this plan, to be displayed in a bulleted-list

        :param bullets: The bullets of this PlanMetadata.
        :type bullets: str
        """

        self._bullets = bullets

    @property
    def costs(self) -> object:
        """
        Gets the costs of this PlanMetadata.
        An array-of-objects that describes the costs of a service, in what currency, and the unit of measure. If there are multiple costs, all of them could be billed to the user (such as a monthly + usage costs at once). Each object must provide the following keys: amount: { usd: float }, unit: string This indicates the cost in USD of the service plan, and how frequently the cost is occurred, such as “MONTHLY” or “per 1000 messages”. NOTE - this will be replaced by the ElasTest cost model. 

        :return: The costs of this PlanMetadata.
        :rtype: object
        """
        return self._costs

    @costs.setter
    def costs(self, costs: object):
        """
        Sets the costs of this PlanMetadata.
        An array-of-objects that describes the costs of a service, in what currency, and the unit of measure. If there are multiple costs, all of them could be billed to the user (such as a monthly + usage costs at once). Each object must provide the following keys: amount: { usd: float }, unit: string This indicates the cost in USD of the service plan, and how frequently the cost is occurred, such as “MONTHLY” or “per 1000 messages”. NOTE - this will be replaced by the ElasTest cost model. 

        :param costs: The costs of this PlanMetadata.
        :type costs: object
        """

        self._costs = costs

    @property
    def display_name(self) -> str:
        """
        Gets the display_name of this PlanMetadata.
        Name of the plan to be display in graphical clients.

        :return: The display_name of this PlanMetadata.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """
        Sets the display_name of this PlanMetadata.
        Name of the plan to be display in graphical clients.

        :param display_name: The display_name of this PlanMetadata.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def extras(self) -> object:
        """
        Gets the extras of this PlanMetadata.
        additional attributes

        :return: The extras of this PlanMetadata.
        :rtype: object
        """
        return self._extras

    @extras.setter
    def extras(self, extras: object):
        """
        Sets the extras of this PlanMetadata.
        additional attributes

        :param extras: The extras of this PlanMetadata.
        :type extras: object
        """

        self._extras = extras

