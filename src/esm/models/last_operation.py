# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class LastOperation(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, state: str=None, description: str=None):
        """
        LastOperation - a model defined in Swagger

        :param state: The state of this LastOperation.
        :type state: str
        :param description: The description of this LastOperation.
        :type description: str
        """
        self.swagger_types = {
            'state': str,
            'description': str
        }

        self.attribute_map = {
            'state': 'state',
            'description': 'description'
        }

        self._state = state
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'LastOperation':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LastOperation of this LastOperation.
        :rtype: LastOperation
        """
        return deserialize_model(dikt, cls)

    @property
    def state(self) -> str:
        """
        Gets the state of this LastOperation.
        Valid values are in progress, succeeded, and failed. While \"state\": \"in progress\", the platform SHOULD continue polling. A response with \"state\": \"succeeded\" or \"state\": \"failed\" MUST cause the platform to cease polling. 

        :return: The state of this LastOperation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """
        Sets the state of this LastOperation.
        Valid values are in progress, succeeded, and failed. While \"state\": \"in progress\", the platform SHOULD continue polling. A response with \"state\": \"succeeded\" or \"state\": \"failed\" MUST cause the platform to cease polling. 

        :param state: The state of this LastOperation.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def description(self) -> str:
        """
        Gets the description of this LastOperation.
        A user-facing message displayed to the platform API client. Can be used to tell the user details about the status of the operation. If present, MUST be a non-empty string. 

        :return: The description of this LastOperation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this LastOperation.
        A user-facing message displayed to the platform API client. Can be used to tell the user details about the status of the operation. If present, MUST be a non-empty string. 

        :param description: The description of this LastOperation.
        :type description: str
        """

        self._description = description

