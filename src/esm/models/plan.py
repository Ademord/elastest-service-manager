# coding: utf-8

from __future__ import absolute_import

from esm.models.plan_metadata import PlanMetadata
from .base_model_ import Model
from ..util import deserialize_model


class Plan(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, description: str=None, metadata: PlanMetadata=None, free: bool=True, bindable: bool=None):
        """
        Plan - a model defined in Swagger

        :param id: The id of this Plan.
        :type id: str
        :param name: The name of this Plan.
        :type name: str
        :param description: The description of this Plan.
        :type description: str
        :param metadata: The metadata of this Plan.
        :type metadata: PlanMetadata
        :param free: The free of this Plan.
        :type free: bool
        :param bindable: The bindable of this Plan.
        :type bindable: bool
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'description': str,
            'metadata': PlanMetadata,
            'free': bool,
            'bindable': bool
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'metadata': 'metadata',
            'free': 'free',
            'bindable': 'bindable'
        }

        self._id = id
        self._name = name
        self._description = description
        self._metadata = metadata
        self._free = free
        self._bindable = bindable

    @classmethod
    def from_dict(cls, dikt) -> 'Plan':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Plan of this Plan.
        :rtype: Plan
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this Plan.
        An identifier used to correlate this plan in future requests to the broker. This MUST be globally unique within a platform marketplace. MUST be a non-empty string. Using a GUID is RECOMMENDED. 

        :return: The id of this Plan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Plan.
        An identifier used to correlate this plan in future requests to the broker. This MUST be globally unique within a platform marketplace. MUST be a non-empty string. Using a GUID is RECOMMENDED. 

        :param id: The id of this Plan.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this Plan.
        The CLI-friendly name of the plan. MUST be unique within the service. All lowercase, no spaces. MUST be a non-empty string. 

        :return: The name of this Plan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Plan.
        The CLI-friendly name of the plan. MUST be unique within the service. All lowercase, no spaces. MUST be a non-empty string. 

        :param name: The name of this Plan.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self) -> str:
        """
        Gets the description of this Plan.
        A short description of the plan. MUST be a non-empty string. 

        :return: The description of this Plan.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this Plan.
        A short description of the plan. MUST be a non-empty string. 

        :param description: The description of this Plan.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def metadata(self) -> PlanMetadata:
        """
        Gets the metadata of this Plan.
        An opaque object of metadata for a service plan. Controller treats this as a blob. Note that there are conventions in existing brokers and controllers for fields that aid in the display of catalog data. Note - the ElasTest Cost model will be set here for the particular offered service. 

        :return: The metadata of this Plan.
        :rtype: PlanMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: PlanMetadata):
        """
        Sets the metadata of this Plan.
        An opaque object of metadata for a service plan. Controller treats this as a blob. Note that there are conventions in existing brokers and controllers for fields that aid in the display of catalog data. Note - the ElasTest Cost model will be set here for the particular offered service. 

        :param metadata: The metadata of this Plan.
        :type metadata: PlanMetadata
        """

        self._metadata = metadata

    @property
    def free(self) -> bool:
        """
        Gets the free of this Plan.
        When false, service instances of this plan have a cost. The default is true. 

        :return: The free of this Plan.
        :rtype: bool
        """
        return self._free

    @free.setter
    def free(self, free: bool):
        """
        Sets the free of this Plan.
        When false, service instances of this plan have a cost. The default is true. 

        :param free: The free of this Plan.
        :type free: bool
        """

        self._free = free

    @property
    def bindable(self) -> bool:
        """
        Gets the bindable of this Plan.
        Specifies whether service instances of the service plan can be bound to applications. This field is OPTIONAL. If specified, this takes precedence over the bindable attribute of the service. If not specified, the default is derived from the service. 

        :return: The bindable of this Plan.
        :rtype: bool
        """
        return self._bindable

    @bindable.setter
    def bindable(self, bindable: bool):
        """
        Sets the bindable of this Plan.
        Specifies whether service instances of the service plan can be bound to applications. This field is OPTIONAL. If specified, this takes precedence over the bindable attribute of the service. If not specified, the default is derived from the service. 

        :param bindable: The bindable of this Plan.
        :type bindable: bool
        """

        self._bindable = bindable

