# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model
import json

class DashboardClient(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, secret: str=None, redirect_uri: str=None):
        """
        DashboardClient - a model defined in Swagger

        :param id: The id of this DashboardClient.
        :type id: str
        :param secret: The secret of this DashboardClient.
        :type secret: str
        :param redirect_uri: The redirect_uri of this DashboardClient.
        :type redirect_uri: str
        """
        self.swagger_types = {
            'id': str,
            'secret': str,
            'redirect_uri': str
        }

        self.attribute_map = {
            'id': 'id',
            'secret': 'secret',
            'redirect_uri': 'redirect_uri'
        }

        self._id = id
        self._secret = secret
        self._redirect_uri = redirect_uri

    @classmethod
    def from_dict(cls, dikt) -> 'DashboardClient':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DashboardClient of this DashboardClient.
        :rtype: DashboardClient
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this DashboardClient.
        The id of the Oauth client that the dashboard will use. If present, MUST be a non-empty string. 

        :return: The id of this DashboardClient.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this DashboardClient.
        The id of the Oauth client that the dashboard will use. If present, MUST be a non-empty string. 

        :param id: The id of this DashboardClient.
        :type id: str
        """

        self._id = id

    @property
    def secret(self) -> str:
        """
        Gets the secret of this DashboardClient.
        A secret for the dashboard client. If present, MUST be a non-empty string. 

        :return: The secret of this DashboardClient.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret: str):
        """
        Sets the secret of this DashboardClient.
        A secret for the dashboard client. If present, MUST be a non-empty string. 

        :param secret: The secret of this DashboardClient.
        :type secret: str
        """

        self._secret = secret

    @property
    def redirect_uri(self) -> str:
        """
        Gets the redirect_uri of this DashboardClient.
        A URI for the service dashboard. Validated by the OAuth token server when the dashboard requests a token. 

        :return: The redirect_uri of this DashboardClient.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri: str):
        """
        Sets the redirect_uri of this DashboardClient.
        A URI for the service dashboard. Validated by the OAuth token server when the dashboard requests a token. 

        :param redirect_uri: The redirect_uri of this DashboardClient.
        :type redirect_uri: str
        """

        self._redirect_uri = redirect_uri