# coding: utf-8

from __future__ import absolute_import

from esm.models.parameter import Parameter
from esm.models.plan_previous_values import PlanPreviousValues
from .base_model_ import Model
from ..util import deserialize_model


class PlanUpdateRequest(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, service_id: str=None, plan_id: str=None, parameters: Parameter=None, accepts_incomplete: bool=None, previous_values: PlanPreviousValues=None):
        """
        PlanUpdateRequest - a model defined in Swagger

        :param service_id: The service_id of this PlanUpdateRequest.
        :type service_id: str
        :param plan_id: The plan_id of this PlanUpdateRequest.
        :type plan_id: str
        :param parameters: The parameters of this PlanUpdateRequest.
        :type parameters: Parameter
        :param accepts_incomplete: The accepts_incomplete of this PlanUpdateRequest.
        :type accepts_incomplete: bool
        :param previous_values: The previous_values of this PlanUpdateRequest.
        :type previous_values: PlanPreviousValues
        """
        self.swagger_types = {
            'service_id': str,
            'plan_id': str,
            'parameters': Parameter,
            'accepts_incomplete': bool,
            'previous_values': PlanPreviousValues
        }

        self.attribute_map = {
            'service_id': 'service_id',
            'plan_id': 'plan_id',
            'parameters': 'parameters',
            'accepts_incomplete': 'accepts_incomplete',
            'previous_values': 'previous_values'
        }

        self._service_id = service_id
        self._plan_id = plan_id
        self._parameters = parameters
        self._accepts_incomplete = accepts_incomplete
        self._previous_values = previous_values

    @classmethod
    def from_dict(cls, dikt) -> 'PlanUpdateRequest':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlanUpdateRequest of this PlanUpdateRequest.
        :rtype: PlanUpdateRequest
        """
        return deserialize_model(dikt, cls)

    @property
    def service_id(self) -> str:
        """
        Gets the service_id of this PlanUpdateRequest.

        :return: The service_id of this PlanUpdateRequest.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """
        Sets the service_id of this PlanUpdateRequest.

        :param service_id: The service_id of this PlanUpdateRequest.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def plan_id(self) -> str:
        """
        Gets the plan_id of this PlanUpdateRequest.
        ID of the new plan from the catalog.

        :return: The plan_id of this PlanUpdateRequest.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id: str):
        """
        Sets the plan_id of this PlanUpdateRequest.
        ID of the new plan from the catalog.

        :param plan_id: The plan_id of this PlanUpdateRequest.
        :type plan_id: str
        """

        self._plan_id = plan_id

    @property
    def parameters(self) -> Parameter:
        """
        Gets the parameters of this PlanUpdateRequest.

        :return: The parameters of this PlanUpdateRequest.
        :rtype: Parameter
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Parameter):
        """
        Sets the parameters of this PlanUpdateRequest.

        :param parameters: The parameters of this PlanUpdateRequest.
        :type parameters: Parameter
        """

        self._parameters = parameters

    @property
    def accepts_incomplete(self) -> bool:
        """
        Gets the accepts_incomplete of this PlanUpdateRequest.
        \"A value of true indicates that the marketplace and its clients support asynchronous broker operations. If this parameter is not included in the request, and the broker can only provision an instance of the requested plan asynchronously, the broker should reject the request with a 422.\" 

        :return: The accepts_incomplete of this PlanUpdateRequest.
        :rtype: bool
        """
        return self._accepts_incomplete

    @accepts_incomplete.setter
    def accepts_incomplete(self, accepts_incomplete: bool):
        """
        Sets the accepts_incomplete of this PlanUpdateRequest.
        \"A value of true indicates that the marketplace and its clients support asynchronous broker operations. If this parameter is not included in the request, and the broker can only provision an instance of the requested plan asynchronously, the broker should reject the request with a 422.\" 

        :param accepts_incomplete: The accepts_incomplete of this PlanUpdateRequest.
        :type accepts_incomplete: bool
        """

        self._accepts_incomplete = accepts_incomplete

    @property
    def previous_values(self) -> PlanPreviousValues:
        """
        Gets the previous_values of this PlanUpdateRequest.

        :return: The previous_values of this PlanUpdateRequest.
        :rtype: PlanPreviousValues
        """
        return self._previous_values

    @previous_values.setter
    def previous_values(self, previous_values: PlanPreviousValues):
        """
        Sets the previous_values of this PlanUpdateRequest.

        :param previous_values: The previous_values of this PlanUpdateRequest.
        :type previous_values: PlanPreviousValues
        """

        self._previous_values = previous_values

